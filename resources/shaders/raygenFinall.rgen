#version 460
#extension GL_EXT_ray_tracing : enable

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
    mat4 viewInverse;
    mat4 projInverse;
} cam;

struct RayPayload {
	vec3 color;
	float distance;
	vec3 normal;
	float reflector;
};

layout(location = 0) rayPayloadEXT RayPayload rayPayload;

// Number of samples for supersampling
const int NUM_SAMPLES =8;

layout (constant_id = 0) const int MAX_RECURSION = 6;
void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz / target.w), 0);
	direction = normalize(direction);
	uint rayFlags = gl_RayFlagsOpaqueEXT;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

	vec3 color = vec3(0.0);

	for (int i = 0; i < MAX_RECURSION; ++i) {
		traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
		vec3 hitColor = rayPayload.color;

		if (rayPayload.distance < 0.0f) {
			color += hitColor;
			break;
		} 
		else if (rayPayload.reflector == 1.0f) {
			const vec4 hitPos = origin + direction * rayPayload.distance;
			origin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
			direction.xyz = reflect(direction.xyz, rayPayload.normal);
		} 
		else if (abs(rayPayload.reflector - 0.5f) < 0.001f) {
		// Wylicz punkt trafienia
			const vec4 hitPos = origin + direction * rayPayload.distance;

		// Normalizacja wektorów
			vec3 normDir = normalize(direction.xyz);
			vec3 normNormal = normalize(rayPayload.normal);

		// Czy uderzyliśmy od zewnątrz (powietrze -> szkło) czy od środka (szkło -> powietrze)?
			bool frontFace = dot(normDir, normNormal) < 0.0;
			vec3 adjustedNormal = frontFace ? normNormal : -normNormal;

		// Współczynnik załamania – szkło ma ok. 1.5
			float eta = frontFace ? (1.0f / 1.5f) : (1.5f / 1.0f);

		// Wylicz kierunek załamania
			vec3 refractedDir = refract(normDir, adjustedNormal, eta);

		// Przesuń origin wgłąb (w kierunku refrakcji lub refleksji), by uniknąć samo-przecięcia
		if (length(refractedDir) < 0.001f) {
			// Całkowite wewnętrzne odbicie
			direction.xyz = reflect(normDir, adjustedNormal);
			origin.xyz = hitPos.xyz + adjustedNormal * 0.001f;
		} else {
			// Udało się załamać
			direction.xyz = refractedDir;
			origin.xyz = hitPos.xyz - adjustedNormal * 0.001f;
		}
	}
		
		else {
			color += hitColor;
			break;
		}

	}


    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}
