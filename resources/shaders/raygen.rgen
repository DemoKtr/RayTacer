#version 460
#extension GL_EXT_ray_tracing : enable

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS[];
layout(binding = 1, set = 0, rgba32f) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
    mat4 viewInverse;
    mat4 projInverse;
} cam;

layout(location = 0) rayPayloadEXT vec3 hitValue;

// Stała określająca liczbę próbek na piksel
const int NUM_SAMPLES = 8;

void main() 
{
    vec3 finalColor = vec3(0.0);
    
    // Supersampling – wystrzeliwanie kilku promieni per piksel
    for (int i = 0; i < NUM_SAMPLES; i++) {
        // Generujemy niewielki offset (jitter) dla podpikseli
        vec2 jitter = vec2(fract(sin(float(i) * 12.9898) * 43758.5453), fract(sin(float(i) * 78.233) * 43758.5453));
        vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + jitter;
        vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
        vec2 d = inUV * 2.0 - 1.0;

        // Obliczanie promienia
        vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
        vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1);
        vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

        float tmin = 0.001;
        float tmax = 10000.0;
        
        hitValue = vec3(0.0);
        
        // Ray tracing dla próbki
        traceRayEXT(topLevelAS[0], gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
        // Akumulacja koloru
        finalColor += hitValue;
        
       // traceRayEXT(topLevelAS[1], gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
        //finalColor += hitValue;
    }

    // Uśrednianie koloru
    finalColor /= float(NUM_SAMPLES);

    // Zapis do tekstury
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor, 1.0));
}
